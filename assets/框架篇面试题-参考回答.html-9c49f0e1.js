import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as t,f as e}from"./app-6c36897a.js";const o={},r=e('<h1 id="框架篇面试题-参考回答" tabindex="-1"><a class="header-anchor" href="#框架篇面试题-参考回答" aria-hidden="true">#</a> 框架篇面试题-参考回答</h1><h2 id="知识网络架构" tabindex="-1"><a class="header-anchor" href="#知识网络架构" aria-hidden="true">#</a> 知识网络架构</h2><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702482846015.png" alt="知识框架" tabindex="0" loading="lazy"><figcaption>知识框架</figcaption></figure><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h2><p><strong>面试官</strong>：Spring框架中的单例bean是线程安全的吗？</p><blockquote><p><strong>Spring框架中的Bean是单例的吗？</strong></p><p>Spring框架中的Bean是单例的，在注册Bean时，可以通过使用Scope注解声明当前的Bean是singleton或者prototype。如果不显示声明，默认为单例。</p><p><strong>如何判断Spring开发中的线程安全问题？</strong></p><p>Controller方法中接收的参数是局部变量，一般没有线程安全问题；但是如果在Controller类中定义了<strong>全局变量</strong>，并且这个全局变量是可修改的，则这个变量就有线程安全问题。如果这个<strong>全局变量</strong>没有状态（不可被修改，例如注入的Service对象、dao对象），则这个全局变量就是线程安全的。</p><p>所以在日常开发过程中应该注意，在Bean中尽量避免定义可被修改的全局成员变量，因为并不能保证他的线程安全。</p></blockquote><p><strong>候选人</strong>：</p><p>不是线程安全的，是这样的</p><p>当多用户同时请求一个服务时，容器会给每一个请求分配一个线程，这是多个线程会并发执行该请求对应的业务逻辑（成员方法），如果该处理逻辑中有对该单例状态的修改（体现为该单例的成员属性），则必须考虑线程同步问题。</p><p>Spring框架并没有对单例bean进行任何多线程的封装处理。关于单例bean的线程安全和并发问题需要开发者自行去搞定。</p><p>比如：我们通常在项目中使用的Spring bean都是不可可变的状态(比如Service类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。</p><p>如果你的bean有多种状态的话（比如 View Model对象），就需要自行保证线程安全。最浅显的解决办法就是将多态bean的作用由“<strong>singleton</strong>”变更为“<strong>prototype</strong>”。</p><blockquote><p>什么是单例Bean？</p><p>**表现？**当我们在Spring容器中注入了某个单例对象后，我们在getBean这个对象的时候，尽管获取多次，多次都拿到同一个对象。</p><p>**底层实现？**底层使用Map结构去存储这些单例Bean对象，因为是一个名字对应一个对象（所以相同的名字返回相同的对象）<code>Map&lt;BeanName, Bean Object&gt;</code>（单例池）。当从Map中找不到该单例Bean时，先去创建这个单例Bean，然后将这个单例Bena放到Map中。</p></blockquote><blockquote><p>什么是多例Bean？（原型Bean）</p><p><strong>表现？</strong>：原型Bean表现为每一次对同一个BeanName进行getBean的时候，都返回不同的对象。就没必要使用单例池了。每一次getBean都创建一个新的对象返回就行了。</p></blockquote><hr><p><strong>面试官</strong>：什么是AOP</p><p><strong>候选人</strong>：</p><p>aop是面向切面编程，在spring中用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取公共模块复用，降低耦合，一般比如可以做为公共日志保存，事务处理等</p><hr><p><strong>面试官</strong>：你们项目中有没有使用到AOP</p><p><strong>候选人</strong>：</p><p>我们当时在后台管理系统中，就是使用aop来记录了系统的操作日志</p><p>主要思路是这样的，使用aop中的环绕通知+切点表达式，这个表达式就是要找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比如类信息、方法信息、注解、请求方式等，获取到这些参数以后，保存到数据库</p><hr><p><strong>面试官</strong>：Spring中的事务是如何实现的</p><p><strong>候选人</strong>：</p><p>spring实现的事务本质就是aop完成，对方法前后进行拦截，在执行方法之前开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><hr><p><strong>面试官</strong>：Spring中事务失效的场景有哪些</p><p><strong>候选人</strong>：</p><p>这个在项目中之前遇到过，我想想啊</p><ol><li>如果方法上异常捕获处理，自己处理了异常，没有抛出，就会导致事务失效，所以一般处理了异常以后，别忘了抛出去就行，我这里用的方式是定义了一个全局异常捕获，并且再某个业务方法中捕获到了异常的话，可以通过throw new 自己定义的业务异常，优雅的实现这个功能。</li></ol><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702551581861.png" alt="1702551581861" style="zoom:50%;"><ol start="2"><li><p>Spring默认回滚非检查异常（RuntimeException），如果方法抛出检查异常（例如FileNotFoundException），报错也会导致事务失效。解决方法是在spring的@Transactional注解上配置rollbackFor属性为Exception，这样别管是什么异常，都会回滚事务。</p></li><li><p>我之前还遇到过一个，如果方法上不是public修饰的，也会导致事务失效，这个原因是因为忽略的Transactional底层的实现，Transactional底层是通过AOP实现的，AOP不能代理私有方法，所以方法声明为private不能被代理。</p></li></ol><hr><p><strong>面试官</strong>：Spring的bean的生命周期</p><p><strong>候选人</strong>：</p><p>嗯！，这个步骤还是挺多的，我之前看过一些源码，它大概流程是这样的</p><ol><li><p>首先会通过一个非常重要的类，叫做BeanDefinition获取bean的定义信息，这里面就封装了bean的所有信息，比如，类的全路径，是否是延迟加载，是否是单例等等这些信息。</p></li><li><p>在创建bean的时候，第一步是调用构造函数实例化bean</p></li><li><p>bean的依赖注入，比如一些set方法注入，像平时开发用的@Autowire都是这一步完成，会给当前Bean对象中的具有@Autowired注解的参数、添加@Value的参数注入值</p></li><li><p>处理Aware接口，如果某一个bean实现了对应的Aware接口就会重写方法执行，可以在指定的时候获取到重要的信息，例如：BeanNameAware、BeanFactoryAware、ApplicationContextAware，分别用于获取beanName、BeanFactory、ApplicationContext</p></li><li><p>bean的后置处理器BeanPostProcessor（初始化前进行回调），用于增强、扩展Bean的功能</p></li><li><p>初始化方法，比如实现了接口InitializingBean，需要重写指定的方法；或者自定义方法init-method标签或@PostConstruct，就会自动执行这个被注解的自定义方法。</p></li><li><p>执行了bean的后置处理器BeanPostProcessor（在初始化方法后进行回调），主要是对bean进行增强，有可能在这里产生代理对象。</p><ol><li>例如，一个类使用了AOP，就是利用BeanPostProcessor的初始化后回调方法实现的。可以打断点发现在getBean时会获取对应的代理对象。</li></ol></li><li><p>最后一步是销毁bean</p></li></ol><p>总体的流程图如下所示：</p><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702阿萨德553815125asd.png" alt="1702553815125" tabindex="0" loading="lazy"><figcaption>1702553815125</figcaption></figure><hr><p><strong>面试官</strong>：Spring中的循环引用</p><blockquote><p><strong>循环依赖的图例：</strong></p><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702559804639.png" alt="1702559804639" tabindex="0" loading="lazy"><figcaption>1702559804639</figcaption></figure><p><strong>三级缓存解决set方法注入的循环依赖问题：</strong></p><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702560019120.png" alt="1702560019120" tabindex="0" loading="lazy"><figcaption>1702560019120</figcaption></figure><ul><li><p>**一级缓存能否解决循环依赖问题？**不能，一级缓存的作用是作为单例池存储已经创建完成的单例Bean对象（完整的走完了整个生命周期），此时创建A依然依赖B、创建B依然依赖A，所以仍然存在循环依赖问题。</p></li><li><p>**一级缓存+二级缓存能否解决循环依赖问题？**可以部分解决，二级缓存作为存储单元，存储尚未完全创建好的对象，可以解决一般Bean对象之间的循环依赖问题，但是如果对Bean对象进行了增强（动态代理），则不能解决，因为此时最终存放到单例池中的不是代理对象，而是普通对象。此时需要借助三级缓存解决代理对象之间的循环依赖问题。</p></li><li><p><strong>一级缓存+二级缓存+三级缓存完美解决循环依赖问题</strong>：一级缓存作为单例池，二级缓存作为半成品存储池，三级缓存作为对象工厂存储池（对象工厂用于生成该对象的代理对象），具体的解决见下图所示，但是三级缓存只能解决大部分的循环依赖问题，仍有一些问题无法解决。</p><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702560992214123.png" alt="三级缓存解决循环依赖问题" tabindex="0" loading="lazy"><figcaption>三级缓存解决循环依赖问题</figcaption></figure></li><li><p>**上述的三级缓存解决循环依赖的问题中，没有二级缓存好像也可以？**不行，上述过程中，二级缓存用于存储的早期Bean对象，后续要用到，例如“将A的代理对象注入给B”、“将B注入给A”，都需要用到早期的Bean对象，直接存储起来，后面用到直接拿就好，否则还需要现创建，效率低。</p></li></ul><p><strong>构造函数产生的循环依赖问题：</strong> 用懒加载的方式，给构造函数的参数声明为懒加载，在创建Bean的时候不用着急注入，什么时候用到了再注入。</p><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/17025614311asd24.png" alt="1702561431124" tabindex="0" loading="lazy"><figcaption>1702561431124</figcaption></figure></blockquote><p><strong>候选人</strong>：</p><p>循环依赖：循环依赖其实就是循环引用,也就是两个或两个以上的bean互相持有对方，最终形成闭环。比如A依赖于B，B依赖于A</p><p>循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖</p><p>①一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象</p><p>②二级缓存：缓存早期的bean对象（生命周期还没走完）</p><p>③三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的</p><hr><p><strong>面试官</strong>：那具体解决流程清楚吗？</p><p><strong>候选人</strong>：</p><p>第一，先实例A对象，同时会创建ObjectFactory对象存入三级缓存singletonFactories</p><p>第二，A在初始化的时候需要B对象，这个走B的创建的逻辑</p><p>第三，B实例化完成，也会创建ObjectFactory对象存入三级缓存singletonFactories</p><p>第四，B需要注入A，通过三级缓存中获取ObjectFactory来生成一个A的对象同时存入二级缓存，这个是有两种情况，一个是可能是A的普通对象，另外一个是A的代理对象，都可以让ObjectFactory来生产对应的对象，这也是三级缓存的关键</p><p>第五，B通过从通过二级缓存earlySingletonObjects 获得到A的对象后可以正常注入，B创建成功，存入一级缓存singletonObjects</p><p>第六，回到A对象初始化，因为B对象已经创建完成，则可以直接注入B，A创建成功存入一次缓存singletonObjects</p><p>第七，二级缓存中的临时对象A清除</p><hr><p><strong>面试官</strong>：构造方法出现了循环依赖怎么解决？</p><p><strong>候选人</strong>：</p><p>由于bean的生命周期中构造函数是第一个执行的，spring框架并不能解决构造函数的的依赖注入，可以使用@Lazy懒加载，什么时候需要对象再进行bean对象的创建</p><h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc" aria-hidden="true">#</a> SpringMVC</h2><p><strong>面试官</strong>：SpringMVC的执行流程知道嘛</p><blockquote><p>SpringMVC的必问面试题</p><p>SpringMVC的执行流程分为两大类，取决于不同的开发手段：视图阶段（JSP）、前后端分离架构阶段（接口开发、异步编程）</p><ol><li><p><strong>视图阶段：</strong></p><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702563650587.png" alt="1702563650587" tabindex="0" loading="lazy"><figcaption>1702563650587</figcaption></figure><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/170256382566sss5.png" alt="1702563825665" tabindex="0" loading="lazy"><figcaption>1702563825665</figcaption></figure></li><li><p><strong>前后端分离架构方案：</strong></p><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702563721400sss.png" alt="1702563721400" tabindex="0" loading="lazy"><figcaption>1702563721400</figcaption></figure><figure><img src="https://raw.githubusercontent.com/devtommy2/PicBed/main/1702563869983.png" alt="1702563869983" tabindex="0" loading="lazy"><figcaption>1702563869983</figcaption></figure></li></ol></blockquote><p><strong>候选人</strong>：</p><p>嗯，这个知道的，它分了好多步骤</p><p>1、用户发送出请求到前端控制器DispatcherServlet，这是一个调度中心</p><p>2、DispatcherServlet收到请求调用HandlerMapping（处理器映射器）。</p><p>3、HandlerMapping找到具体的处理器(可查找xml配置或注解配置)，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。</p><p>4、DispatcherServlet调用HandlerAdapter（处理器适配器）。</p><p>5、HandlerAdapter经过适配调用具体的处理器（Handler/Controller）。</p><p>6、Controller执行完成返回ModelAndView对象。</p><p>7、HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet。</p><p>8、DispatcherServlet将ModelAndView传给ViewReslover（视图解析器）。</p><p>9、ViewReslover解析后返回具体View（视图）。</p><p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p><p>11、DispatcherServlet响应用户。</p><p>当然现在的开发，基本都是前后端分离的开发的，并没有视图这些，一般都是handler中使用Response直接结果返回</p><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> SpringBoot</h2><p><strong>面试官</strong>：Springboot自动配置原理</p><p><strong>候选人</strong>：</p><p>在Spring Boot项目中的引导类上有一个注解**@SpringBootApplication**，这个注解是对三个注解进行了封装，分别是：</p><ul><li><p>@SpringBootConfiguration：该注解和@Configuration注解作用相同，声明当前的类是一个配置类</p></li><li><p>@EnableAutoConfiguration：SpringBoot实现自动装配的核心注解</p></li><li><p>@ComponentScan：组件扫描，默认扫描的是当前引导类所在的包及其子包</p></li></ul><p><strong>其中<code>@EnableAutoConfiguration</code>是实现自动化配置的核心注解。</strong></p><p>该注解通过<code>@Import</code>注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的Jar包的的classpath路径下<strong>META-INF/spring.factories</strong>文件中的所配置的类的全类名。</p><p>在这些配置类中所定义的Bean会根据条件注解所<strong>指定的条件来决定</strong>是否需要将其导入到Spring容器中。</p><p>一般条件判断会有像<code>@ConditionalOnClass</code>这样的注解，判断是否有对应的class文件（pom中是否引入该依赖），如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。</p><hr><p><strong>面试官</strong>：Spring 的常见注解有哪些？</p><p><strong>候选人</strong>：</p><p>嗯，这个就很多了</p><p>第一类是：声明bean，有@Component、@Service、@Repository、@Controller、@RestController</p><p>第二类是：依赖注入相关的，有@Autowired、@Qualifier、@Resourse</p><p>第三类是：设置作用域 @Scope</p><p>第四类是：spring配置相关的，比如@Configuration，@ComponentScan 和 @Bean</p><p>第五类是：跟aop相关做增强的注解 @Aspect，@Before，@After，@Around，@Pointcut</p><hr><p><strong>面试官</strong>：SpringMVC常见的注解有哪些？</p><p><strong>候选人</strong>：</p><p>@RequestMapping：用于映射请求路径；</p><p>@RequestBody：注解实现接收http请求的json数据，将json转换为java对象；</p><p>@RequestParam：指定请求参数的名称；</p><p>@PathViriable：从请求路径下中获取请求参数(/user/{id})，传递给方法的形式参数；</p><p>@ResponseBody：注解实现将controller方法返回对象转化为json对象响应给客户端；</p><p>@RequestHeader：获取指定的请求头数据，还有像@PostMapping、@GetMapping这些。</p><hr><p><strong>面试官</strong>：Springboot常见注解有哪些？</p><p><strong>候选人</strong>：</p><p>Spring Boot的核心注解是@SpringBootApplication , 他由几个注解组成 :</p><ul><li>@SpringBootConfiguration： 组合了- @Configuration注解，实现配置文件的功能；</li><li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li><li>@ComponentScan：Spring组件扫描</li></ul><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> MyBatis</h2><p><strong>面试官</strong>：MyBatis执行流程</p><p><strong>候选人</strong>：</p><p>好，这个知道的，不过步骤也很多</p><p>①读取MyBatis配置文件：mybatis-config.xml加载运行环境和映射文件</p><p>②构造会话工厂SqlSessionFactory，一个项目只需要一个，单例的，一般由spring进行管理</p><p>③会话工厂创建SqlSession对象，这里面就含了执行SQL语句的所有方法</p><p>④操作数据库的接口，Executor执行器，同时负责查询缓存的维护</p><p>⑤Executor接口的执行方法中有一个MappedStatement类型的参数，封装了映射信息</p><p>⑥输入参数映射</p><p>⑦输出结果映射</p><p><strong>面试官</strong>：Mybatis是否支持延迟加载？</p><p><strong>候选人</strong>：</p><p>是支持的~</p><p>延迟加载的意思是：就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。</p><p>Mybatis支持一对一关联对象和一对多关联集合对象的延迟加载</p><p>在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false，默认是关闭的</p><p><strong>面试官</strong>：延迟加载的底层原理知道吗？</p><p><strong>候选人</strong>：</p><p>嗯，我想想啊</p><p>延迟加载在底层主要使用的CGLIB动态代理完成的</p><p>第一是，使用CGLIB创建目标对象的代理对象，这里的目标对象就是开启了延迟加载的mapper</p><p>第二个是当调用目标方法时，进入拦截器invoke方法，发现目标方法是null值，再执行sql查询</p><p>第三个是获取数据以后，调用set方法设置属性值，再继续查询目标方法，就有值了</p><p><strong>面试官</strong>：Mybatis的一级、二级缓存用过吗？</p><p><strong>候选人</strong>：</p><p>嗯~~，用过的~</p><p>mybatis的一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当Session进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存</p><p>关于二级缓存需要单独开启</p><p>二级缓存是基于namespace和mapper的作用域起作用的，不是依赖于SQL session，默认也是采用 PerpetualCache，HashMap 存储。</p><p>如果想要开启二级缓存需要在全局配置文件和映射文件中开启配置才行。</p><p><strong>面试官</strong>：Mybatis的二级缓存什么时候会清理缓存中的数据</p><p><strong>候选人</strong>：</p><p>当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了新增、修改、删除操作后，默认该作用域下所有 select 中的缓存将被 clear。</p>',147),i=[r];function a(s,g){return n(),t("div",null,i)}const d=p(o,[["render",a],["__file","框架篇面试题-参考回答.html.vue"]]);export{d as default};
